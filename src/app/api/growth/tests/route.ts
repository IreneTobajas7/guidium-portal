import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// GET /api/growth/tests - Get available tests
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const newHireId = searchParams.get('newHireId');

    // Get all available tests
    const { data: tests, error: testsError } = await supabase
      .schema('api')
      .from('growth_tests')
      .select('*')
      .eq('is_active', true)
      .order('name');

    if (testsError) {
      console.error('Error fetching tests:', testsError);
      return NextResponse.json({ error: 'Failed to fetch tests' }, { status: 500 });
    }

    // If newHireId is provided, also get completed tests
    let completedTests: any[] = [];
    if (newHireId) {
      const { data: completed, error: completedError } = await supabase
        .schema('api')
        .from('growth_test_results')
        .select(`
          id,
          test_id,
          result_summary,
          insights,
          completed_at,
          growth_tests (
            id,
            name,
            category
          )
        `)
        .eq('new_hire_id', newHireId)
        .order('completed_at', { ascending: false });

      if (completedError) {
        console.error('Error fetching completed tests:', completedError);
      } else {
        completedTests = completed || [];
      }
    }

    // Mark which tests are completed
    const testsWithCompletionStatus = tests?.map((test: any) => ({
      ...test,
      isCompleted: completedTests.some(ct => ct.test_id === test.id),
      completedResult: completedTests.find(ct => ct.test_id === test.id)
    }));

    return NextResponse.json({
      tests: testsWithCompletionStatus,
      completedTests
    });
  } catch (error) {
    console.error('Error in GET /api/growth/tests:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// POST /api/growth/tests - Submit test results
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const {
      newHireId,
      testId,
      answers,
      resultSummary,
      insights
    } = body;

    if (!newHireId || !testId || !answers) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    // Store the test result
    const { data: result, error: insertError } = await supabase
      .schema('api')
      .from('growth_test_results')
      .insert({
        new_hire_id: newHireId,
        test_id: testId,
        result_data: answers,
        result_summary: resultSummary,
        insights: insights || []
      })
      .select()
      .single();

    if (insertError) {
      console.error('Error inserting test result:', insertError);
      return NextResponse.json({ error: 'Failed to save test result' }, { status: 500 });
    }

    // Generate AI insights based on the test result
    try {
      const insightPrompts = [
        `Based on the test result "${resultSummary}", what are 2-3 key strengths this person should leverage?`,
        `Given this test result, what are 1-2 development areas they could focus on?`,
        `How can this person apply these insights in their daily work?`
      ];

      const generatedInsights = [];
      for (const prompt of insightPrompts) {
        // Here you would integrate with OpenAI to generate insights
        // For now, we'll create placeholder insights
        const insight = {
          insight_type: 'development',
          title: 'Development Insight',
          description: 'This is a placeholder insight that would be generated by AI based on the test results.',
          confidence_score: 0.85,
          is_positive: true,
          actionable_items: ['Focus on leveraging your strengths', 'Practice the identified development areas']
        };
        generatedInsights.push(insight);
      }

      // Store the insights
      if (generatedInsights.length > 0) {
        const insightsToInsert = generatedInsights.map(insight => ({
          ...insight,
          new_hire_id: newHireId
        }));

        const { error: insightsError } = await supabase
          .schema('api')
          .from('growth_insights')
          .insert(insightsToInsert);

        if (insightsError) {
          console.error('Error inserting insights:', insightsError);
        }
      }
    } catch (insightError) {
      console.error('Error generating insights:', insightError);
      // Don't fail the test submission if insight generation fails
    }

    return NextResponse.json({ result });
  } catch (error) {
    console.error('Error in POST /api/growth/tests:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
} 